// tick this to make the cache invalidate and update
const CACHE_VERSION = 18;
const CURRENT_CACHES = {
    'read-through': 'read-through-cache-v' + CACHE_VERSION
};

self.addEventListener('activate', (event) => {
    // Delete all caches that aren't named in CURRENT_CACHES.
    // While there is only one cache in this example, the same logic will handle the case where
    // there are multiple versioned caches.
    const expectedCacheNames = Object.keys(CURRENT_CACHES).map((key) => {
        return CURRENT_CACHES[key];
    });

    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (expectedCacheNames.indexOf(cacheName) === -1) {
                        // If this cache name isn't present in the array of "expected" cache names, then delete it.
                        console.log(CACHE_VERSION+'Deleting out of date cache:', cacheName);
                        return caches.delete(cacheName);
                    } else console.log('Cache found:', cacheName);
                })
            );
        })
    );
});

// This sample illustrates an aggressive approach to caching, in which every valid response is
// cached and every request is first checked against the cache.
// This may not be an appropriate approach if your web application makes requests for
// arbitrary URLs as part of its normal operation (e.g. a RSS client or a news aggregator),
// as the cache could end up containing large responses that might not end up ever being accessed.
// Other approaches, like selectively caching based on response headers or only caching
// responses served from a specific domain, might be more appropriate for those use cases.
self.addEventListener('fetch', (event) => {
    // console.log('Handling fetch event for', event.request.url);
    event.respondWith(
        caches.match(event.request).then(function(response) {
            if (response) {
                // console.log('Found response in cache:', response);
                return response;
            }
            console.log('No response found in cache. About to fetch from network...', event.request.url);

            return fetch(event.request).then(function(response) {
                return response;
            }).catch(function(error) {
                console.log('Fetching failed:', error);
                // throw error;
            });

        })
    );
});

self.addEventListener('install', function (event) {
    var now = Date.now();

    var urlsToPrefetch = [
        './cordova.js',
        '/',
        './assets/fonts/roboto-medium.ttf',
        './assets/fonts/roboto-regular.ttf',
        './assets/fonts/ionicons.woff2?v=3.0.0-alpha.3',
        './assets/fonts/fontawesome-webfont.woff2?v=4.7.0',
        './assets/fonts/fontawesome-webfont.woff?v=4.7.0',
        './assets/fonts/fontawesome-webfont.ttf?v=4.7.0',
        './build/main.css',
        './build/polyfills.js',
        './build/main.js',
        'https://storage.googleapis.com/ilhanet-140808.appspot.com/logo/logo-delivery-24-horas-rio-das-ostras.png',
        {
            cors : true,
            url: 'https://erpnet-v5.ilhanet.com/erpnet-api/product_group'
        }
    ];
    var urlsToPrefetchCors = [
        'https://erpnet-v5.ilhanet.com/erpnet-api/product_group'
    ];

    // All of these logging statements should be visible via the "Inspect" interface
    // for the relevant SW accessed via chrome://serviceworker-internals
    // console.log('Handling install event. Resources to prefetch:', urlsToPrefetch);

    // only happens once for this version of the service worker
    // wait until the install event has resolved
    event.waitUntil(
        // then create our named cached
        caches
            .open(CURRENT_CACHES['read-through'])
            .then(function (cache) {
                var cachePromises = urlsToPrefetch.map(function(urlToPrefetch) {
                    var url, request;
                    if (typeof urlToPrefetch =='string') {
                        url = new URL(urlToPrefetch, location.href);
                        url.search += (url.search ? '&' : '?') + 'cache-bust=' + now;
                        request = new Request(url, {mode: 'no-cors'});
                    }
                    if (typeof urlToPrefetch =='object') {
                        url = new URL(urlToPrefetch.url, location.href);
                        // url.search += (url.search ? '&' : '?') + 'cache-bust=' + now;
                        request = new Request(url);
                    }
                    return fetch(request)
                        .then(function(response) {
                            if (response.status == 404) {
                                console.log('Fetch from network %s not found.', urlToPrefetch);
                                return;
                            }
                            if (response.status >= 400) {
                                throw new Error('request for ' + urlToPrefetch +
                                    ' failed with status ' + response.statusText);
                            }

                            // Use the original URL without the cache-busting parameter as the key for cache.put().
                            return cache.put(urlToPrefetch, response);
                        })
                        .catch(function(error) {
                            console.log('Not caching ' + urlToPrefetch + ' due to ' + error);
                        });

                });

                return Promise.all(cachePromises).then(function() {
                    console.log('Pre-fetching complete.');
                });

            })
            .catch(error => console.error('Pre-fetching failed:', error) )
    );
});